
### artifactory

<source>
  @type tail
  @id access_service_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/access-service.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/access-service.log.pos"
  tag jfrog.rt.access.service
  read_from_head true
  <parse>
    @type none
  </parse>
</source>
<source>
  @type tail
  @id artifactory_service_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/artifactory-service.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/artifactory-service.log.pos"
  tag jfrog.rt.artifactory.service
  read_from_head true
  <parse>
    @type none
  </parse>
</source>
<source>
  @type tail
  @id frontend_service_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/frontend-service.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/frontend-service.log.pos"
  tag jfrog.rt.frontend.service
  read_from_head true
  <parse>
    @type none
  </parse>
</source>
<source>
  @type tail
  @id metadata_service_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/metadata-service.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/metadata-service.log.pos"
  tag jfrog.rt.metadata.service
  read_from_head true
  <parse>
    @type none
  </parse>
</source>
<source>
  @type tail
  @id router_service_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/router-service.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/router-service.log.pos"
  tag jfrog.rt.router.service
  read_from_head true
  <parse>
    @type none
  </parse>
</source>
# Strip out color codes then field extract the service fields
<filter jfrog.rt.**.service>
  @type record_transformer
  enable_ruby true
  <record>
    message ${record["message"].gsub(/\e\[([;\d]+)?m/, '')}
  </record>
</filter>
<filter jfrog.rt.**.service>
  @type parser
  key_name message
  <parse>
      @type multiline
      format_firstline /\d{4}-\d{1,2}-\d{1,2}/
      format1 /^(?<timestamp>[^ ]*) \[(?<service_type>[^\]]*)\] \[(?<log_level>[^\]]*)\] \[(?<trace_id>[^\]]*)\] \[(?<class_line_number>.*)\] \[(?<thread>.*)\] -(?<message>.*)$/
  </parse>
</filter>
# End Service Fields Extraction


<source>
  @type tail
  @id router_traefik_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/router-traefik.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/router-traefik.log.pos"
  tag jfrog.rt.router.traefik
  read_from_head true
  <parse>
      @type multiline
      format_firstline /\d{4}-\d{1,2}-\d{1,2}/
      format1 /^(?<timestamp>[^ ]*) \[(?<service_type>[^\]]*)\] \[(?<log_level>[^\]]*)\] \[(?<trace_id>[^\]]*)\] \[(?<class_line_number>.*)\] \[(?<thread>.*)\] -(?<message>.*)$/
  </parse>
</source>

<source>
  @type tail
  @id access_request_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/access-request.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/access-request.log.pos"
  tag jfrog.rt.access.request
  read_from_head true
  <parse>
    @type regexp
    expression ^(?<timestamp>[^ ]*)\|(?<trace_id>[^\|]*)\|(?<remote_address>[^\|]*)\|(?<username>[^\|]*)\|(?<request_method>[^\|]*)\|(?<request_url>[^\|]*)\|(?<return_status>[^\|]*)\|(?<response_content_length>[^\|]*)\|(?<request_content_length>[^\|]*)\|(?<request_duration>[^\|]*)\|(?<request_user_agent>.+)$
  </parse>
</source>
<source>
  @type tail
  @id artifactory_request_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/artifactory-request.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/artifactory-request.log.pos"
  tag jfrog.rt.artifactory.request
  read_from_head true
  <parse>
    @type regexp
    expression ^(?<timestamp>[^ ]*)\|(?<trace_id>[^\|]*)\|(?<remote_address>[^\|]*)\|(?<username>[^\|]*)\|(?<request_method>[^\|]*)\|(?<request_url>[^\|]*)\|(?<return_status>[^\|]*)\|(?<response_content_length>[^\|]*)\|(?<request_content_length>[^\|]*)\|(?<request_duration>[^\|]*)\|(?<request_user_agent>.+)$
  </parse>
</source>
<filter jfrog.rt.artifactory.request>
  @type record_transformer
  enable_ruby true
  <record>
    repo ${record["request_url"].include?("/api/docker") && !record["request_url"].include?("/api/docker/null") && !record["request_url"].include?("/api/docker/v2") ? (record["request_url"].split('/')[3]) : ("")}
    image ${record["request_url"].include?("/api/docker") && !record["request_url"].include?("/api/docker/null") && !record["request_url"].include?("/api/docker/v2")  ? (record["request_url"].split('/')[5]) : ("")}
  </record>
</filter>
<source>
  @type tail
  @id frontend_request_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/frontend-request.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/frontend-request.log.pos"
  tag jfrog.rt.frontend.request
  read_from_head true
  <parse>
    @type regexp
    expression ^(?<timestamp>[^ ]*)\|(?<trace_id>[^\|]*)\|(?<remote_address>[^\|]*)\|(?<username>[^\|]*)\|(?<request_method>[^\|]*)\|(?<request_url>[^\|]*)\|(?<return_status>[^\|]*)\|(?<response_content_length>[^\|]*)\|(?<request_content_length>[^\|]*)\|(?<request_duration>[^\|]*)\|(?<request_user_agent>.+)$
  </parse>
</source>
<source>
  @type tail
  @id metadata_request_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/metadata-request.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/metadata-request.log.pos"
  tag jfrog.rt.metadata.request
  read_from_head true
  <parse>
    @type regexp
    expression ^(?<timestamp>[^ ]*)\|(?<trace_id>[^\|]*)\|(?<remote_address>[^\|]*)\|(?<username>[^\|]*)\|(?<request_method>[^\|]*)\|(?<request_url>[^\|]*)\|(?<return_status>[^\|]*)\|(?<response_content_length>[^\|]*)\|(?<request_content_length>[^\|]*)\|(?<request_duration>[^\|]*)\|(?<request_user_agent>.+)$
  </parse>
</source>
<source>
  @type tail
  @id router_request_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/router-request.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/router-request.log.pos"
  tag jfrog.rt.router.request
  read_from_head true
  <parse>
    @type json
  </parse>
</source>
<source>
  @type tail
  @id artifactory_access_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/artifactory-access.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/artifactory-access.log.pos"
  tag jfrog.rt.artifactory.access
  read_from_head true
  <parse>
    @type regexp
    expression /^(?<timestamp>[^ ]*) \[(?<trace_id>[^\]]*)\] \[(?<action_response>[^\]]*)\] (?<repo_path>.*) for client : (?<username>.+)/(?<ip>.+).$/
  </parse>
</source>
<source>
  @type tail
  @id access_security_audit_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/access-security-audit.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/access-security-audit.log.pos"
  tag jfrog.rt.access.audit
  read_from_head true
  <parse>
    @type regexp
    expression /^(?<timestamp>[^ ]*)\|(?<token_id>[^ ]*)\|(?<user_ip>[^ ]*)\|(?<user>[^ ]*)\|(?<logged_principal>[^ ]*)\|(?<entity_name>[^ ]*)\|(?<event_type>[^ ]*)\|(?<event>[^ ]*)\|(?<data_changed>.*)/
  </parse>
</source>
<filter jfrog.**>
  @type record_transformer
  <record>
    hostname "#{Socket.gethostname}"
    log_source ${tag}
  </record>
</filter>
<source>
  @type exec
  tag jfrog.callhome
  command "curl --request GET 'http://localhost:8081/artifactory/api/system/version' -H 'Authorization: Bearer <TOKEN>'"
  run_interval 1d
  <parse>
    @type json
  </parse>
</source>
<filter jfrog.callhome>
  @type record_transformer
  renew_record true
  keep_keys 'productId,features'
  enable_ruby true
  <record>
    productId 'jfrogLogAnalyticsElastic/0.9.0'
    features ${return([{"featureId" => "ArtifactoryVersion/" + record["version"]}])}
  </record>
</filter>
<match jfrog.callhome>
  @type http
  endpoint http://localhost:8081/artifactory/api/system/usage
  open_timeout 5
  content_type application/json
  headers {"Authorization":"Bearer <TOKEN>"}
  <format>
    @type json
  </format>
  <buffer>
    flush_interval 5s
  </buffer>
</match>
<filter jfrog.rt.artifactory.request>
  @type record_transformer
  enable_ruby true
  <record>
    repo ${record["request_url"].include?("/api/docker") && !record["request_url"].include?("/api/docker/null") && !record["request_url"].include?("/api/docker/v2") ? (record["request_url"].split('/')[3]) : ("")}
    image ${record["request_url"].include?("/api/docker") && !record["request_url"].include?("/api/docker/null") && !record["request_url"].include?("/api/docker/v2")  ? (record["request_url"].split('/')[5]) : ("")}
  </record>
</filter>
<filter jfrog.rt.artifactory.request>
    @type record_transformer
    enable_ruby true
    <record>
      response_content_length_2 ${record["response_content_length"].to_f}
      request_content_length_2 ${record["request_content_length"].to_f}
      request_duration_2 ${record["request_duration"].to_f}
    </record>
</filter>



### xray
<source>
  @type tail
  @id xray_server_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-server-service.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-server-service.log.pos"
  tag jfrog.xray.server.service
  read_from_head true
  <parse>
    @type none
  </parse>
</source>
<source>
  @type tail
  @id xray_persist_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-persist-service.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-persist-service.log.pos"
  tag jfrog.xray.persist.service
  read_from_head true
  <parse>
    @type none
  </parse>
</source>
<source>
  @type tail
  @id xray_indexer_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-indexer-service.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-indexer-service.log.pos"
  tag jfrog.xray.indexer.service
  read_from_head true
  <parse>
    @type none
  </parse>
</source>
<source>
  @type tail
  @id xray_analysis_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-analysis-service.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-analysis-service.log.pos"
  read_from_head true
  tag jfrog.xray.analysis.service
  <parse>
    @type none
  </parse>
</source>
<source>
  @type tail
  @id xray_router_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-router-service.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-router-service.log.pos"
  read_from_head true
  tag jfrog.xray.router.service
  <parse>
    @type none
  </parse>
</source>
<source>
  @type tail
  @id xray_router_traefik_tail
  path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-router-traefik.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-router-traefik.log.pos"
  read_from_head true
  tag jfrog.xray.router.traefik
  <parse>
      @type regexp
      expression ^(?<timestamp>[^ ]*) \[(?<service_type>[^\]]*)\] \[(?<log_level>[^\]]*)\] \[(?<trace_id>[^\]]*)\] \[(?<class_line_number>.*)\] \[(?<thread>.*)\] -(?<message>.+)$
  </parse>
</source>
<source>
  @type tail
  @id xray_router_request_tail
  path  "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-router-request.log"
  pos_file "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-router-request.log.pos"
  read_from_head true
  tag jfrog.xray.router.request
  <parse>
    @type json
  </parse>
</source>
<source>
  @type tail
  @id xray_request_tail
  path  "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-request.log"
  pos_file  "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/xray-request.log.pos"
  read_from_head true
  tag jfrog.xray.xray.request
  <parse>
    @type regexp
    expression ^(?<timestamp>[^|]*)\|(?<trace_id>[^|]*)\|(?<remote_address>[^|]++)\|(?<username>[^\|]*)\|(?<request_method>[^\|]*)\|(?<request_url>[^\|]*)\|(?<return_status>[^\|]*)\|(?<request_content_length>[^\|]*)\|(?<response_content_length>[^\|]*)\|(?<request_duration>[^\|]*)\|(?<request_user_agent>.*)$
  </parse>
</source>
# STRIP COLOR CODES FROM SERVICE LOGS
<filter jfrog.xray.**.service>
  @type record_transformer
  enable_ruby true
  <record>
    message ${record["message"].gsub(/\e\[([;\d]+)?m/, '')}
  </record>
</filter>
# FIELD EXTRACT SERVICE LOG
<filter jfrog.xray.**.service>
  @type parser
  key_name message
  <parse>
      @type multiline
      format_firstline /\d{4}-\d{1,2}-\d{1,2}/
      format1 /^(?<timestamp>[^ ]*) \[(?<service_type>[^\]]*)\] \[(?<log_level>[^\]]*)\] \[(?<trace_id>[^\]]*)\] \[(?<class_line_number>.*)\] \[(?<thread>.*)\] (?<message>.*)$/
  </parse>
</filter>
<filter jfrog.**>
  @type record_transformer
  <record>
    hostname "#{Socket.gethostname}"
    log_source ${tag}
  </record>
</filter>


### artifactory

##JFROG METRICS Plugin
<source>
  @type jfrog_metrics
  @id metrics_http_jfrt
  tag jfrog.metrics.artifactory
  interval 5s
  metric_prefix 'jfrog.artifactory'
  jpd_url "#{ENV['JF_JPD_URL']}"
  username "#{ENV['JF_JPD_USER_NAME']}"
  apikey "#{ENV['JF_JPD_API_KEY']}"
  token "#{ENV['JF_JPD_TOKEN']}"
  target_platform "ELASTIC"
</source>


########################
# ELASTIC OUTPUT METRICS
########################
<match jfrog.metrics.**>
  @type elasticsearch
  @id elasticsearch_metrics
  host "#{ENV['ELASTIC_HOST']}"
  port "#{ENV['ELASTIC_PORT']}"
  user "#{ENV['ELASTIC_USER']}"
  password "#{ENV['ELASTIC_PASSWORD']}"
  scheme "#{ENV['ELASTIC_SCHEME']}"
  ssl_verify "#{ENV['ELASTIC_SSL_VERIFY']}"
  index_name unified-metrics-artifactory
  include_tag_key true
  type_name fluentd
  logstash_format false
  include_timestamp true
</match>
#END ELASTIC OUTPUT

########################
# ELASTIC OUTPUT LOGS
########################
<match jfrog.rt.**>
  @type elasticsearch
  @id elasticsearch_logs
  host "#{ENV['ELASTIC_HOST']}"
  port "#{ENV['ELASTIC_PORT']}"
  user "#{ENV['ELASTIC_USER']}"
  password "#{ENV['ELASTIC_PASSWORD']}"
  scheme "#{ENV['ELASTIC_SCHEME']}"
  ssl_verify "#{ENV['ELASTIC_SSL_VERIFY']}"
  index_name unified-artifactory
  include_tag_key true
  type_name fluentd
  logstash_format false
</match>
#END ELASTIC OUTPUT


### xray

########################
# ELASTIC OUTPUT LOGS
########################
<match jfrog.xray.**>
  @type elasticsearch
  @id elasticsearch_xray
  host "#{ENV['ELASTIC_HOST']}"
  port "#{ENV['ELASTIC_PORT']}"
  user "#{ENV['ELASTIC_USER']}"
  password "#{ENV['ELASTIC_PASSWORD']}"
  scheme "#{ENV['ELASTIC_SCHEME']}"
  ssl_verify "#{ENV['ELASTIC_SSL_VERIFY']}"
  index_name unified-xray
  include_tag_key true
  type_name fluentd
  logstash_format false
</match>
#END ELASTIC OUTPUT



### xray violation

# <source>
#   @type jfrog_siem
#   tag "jfrog.xray.siem.vulnerabilities"
#   jpd_url "#{ENV['JF_JPD_URL']}"
#   apikey "#{ENV['JF_JPD_API_KEY']}"
#   pos_file_path "#{ENV['JF_PRODUCT_DATA_INTERNAL']}/log/"
# </source>
# <filter jfrog.xray.siem.**>
#   @type record_transformer
#   enable_ruby true
#   <record>
#     vulnerability.description.text ${record["description"]}
#     vulnerability.report_id ${record["issue_id"]}
#     vulnerability.severity ${record["severity"]}
#     vulnerability.category ${record["type"]}
#     vulnerability.reference ${record["violation_details_url"]}
#     vulnerability.id ${record["cve"]}
#     vulnerability.enumeration "CVE"
#     vulnerability.classification "CVSS"
#     vulnerability.score.version ${record["cvss_version"]}
#     vulnerability.score.base ${record["cvss_score"]}
#     vulnerability.scanner.vendor "Xray"
#   </record>
# </filter>
# <filter jfrog.xray.siem.**>
#   @type record_modifier
#   <record>
#     _description_ ${if record.has_key?('description'); record.delete('description') ; end; nil}
#     _issue_id_ ${if record.has_key?('issue_id'); record.delete('issue_id') ; end; nil}
#     _severity_ ${if record.has_key?('severity'); record.delete('severity') ; end; nil}
#     _cve_ ${if record.has_key?('cve'); record.delete('cve') ; end; nil}
#     _type_ ${if record.has_key?('type'); record.delete('type') ; end; nil}
#     _violation_details_url_ ${if record.has_key?('violation_details_url'); record.delete('violation_details_url') ; end; nil}
#     _cvss_score_ ${if record.has_key?('cvss_score'); record.delete('cvss_score') ; end; nil}
#     _cvss_version_ ${if record.has_key?('cvss_version'); record.delete('cvss_version') ; end; nil}
#   </record>
#   remove_keys _description_, _issue_id_, _severity_, _cve_, _type_, _violation_details_url_, _cvss_score_, _cvss_version_
# </filter>
# <match jfrog.xray.siem.**>
#   @type elasticsearch
#   @id elasticsearch_xray_violation
#   host "#{ENV['ELASTIC_HOST']}"
#   port "#{ENV['ELASTIC_PORT']}"
#   user "#{ENV['ELASTIC_USER']}"
#   password "#{ENV['ELASTIC_PASSWORD']}"
#   scheme "#{ENV['ELASTIC_SCHEME']}"
#   ssl_verify "#{ENV['ELASTIC_SSL_VERIFY']}"
#   index_name xray_violations
#   include_tag_key true
#   type_name fluentd
#   logstash_format false
# </match>
